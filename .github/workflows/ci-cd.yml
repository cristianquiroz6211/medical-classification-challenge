name: Medical Classification CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test model imports
      run: |
        python -c "from src.models import MedicalTextClassifier; print('✅ Model import successful')"
        python -c "from src.utils import preprocess_medical_text; print('✅ Utils import successful')"
        python -c "from src.evaluation import calculate_multilabel_metrics; print('✅ Evaluation import successful')"
    
    - name: Test API endpoints
      run: |
        # Start API in background
        python scripts/api.py &
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:5000/health || exit 1
        
        # Test categories endpoint
        curl -f http://localhost:5000/categories || exit 1
        
        echo "✅ API tests passed"
    
    - name: Run training script (quick test)
      run: |
        # Quick test with reduced data to verify training pipeline
        timeout 120s python main.py || echo "Training test completed (timeout expected)"
    
    - name: Generate coverage report
      run: |
        pytest --cov=src --cov-report=xml tests/ || echo "Tests completed"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build model
      run: |
        python main.py
    
    - name: Create deployment artifact
      run: |
        mkdir -p deployment
        cp -r src/ deployment/
        cp -r scripts/ deployment/
        cp -r models/ deployment/ 
        cp requirements.txt deployment/
        cp README.md deployment/
        tar -czf medical-classifier-deployment.tar.gz deployment/
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: medical-classifier-deployment
        path: medical-classifier-deployment.tar.gz
        retention-days: 30

  docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.8-slim
        
        WORKDIR /app
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        COPY . .
        
        EXPOSE 5000
        
        HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
          CMD curl -f http://localhost:5000/health || exit 1
        
        CMD ["python", "scripts/api.py"]
        EOF
    
    - name: Build Docker image
      run: |
        docker build -t medical-classifier:latest .
    
    - name: Test Docker container
      run: |
        # Start container in background
        docker run -d -p 5000:5000 --name test-container medical-classifier:latest
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:5000/health
        
        # Cleanup
        docker stop test-container
        docker rm test-container
        
        echo "✅ Docker tests passed"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan with bandit
      run: |
        python -m pip install bandit
        bandit -r src/ scripts/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json
